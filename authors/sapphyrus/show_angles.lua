--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_log, client_draw_rectangle, client_draw_circle_outline, client_userid_to_entindex, client_draw_indicator, client_draw_gradient, client_set_event_callback, client_screen_size, client_eye_position = client.latency, client.log, client.draw_rectangle, client.draw_circle_outline, client.userid_to_entindex, client.draw_indicator, client.draw_gradient, client.set_event_callback, client.screen_size, client.eye_position 
local client_draw_circle, client_color_log, client_delay_call, client_draw_text, client_visible, client_exec, client_trace_line, client_set_cvar = client.draw_circle, client.color_log, client.delay_call, client.draw_text, client.visible, client.exec, client.trace_line, client.set_cvar 
local client_world_to_screen, client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.world_to_screen, client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_get_player_name, entity_get_steam64, entity_get_bounding_box, entity_get_all, entity_set_prop, entity_get_player_weapon = entity.get_local_player, entity.is_enemy, entity.get_player_name, entity.get_steam64, entity.get_bounding_box, entity.get_all, entity.set_prop, entity.get_player_weapon 
local entity_hitbox_position, entity_get_prop, entity_get_players, entity_get_classname = entity.hitbox_position, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_is_menu_open, ui_new_color_picker, ui_set_callback, ui_set, ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.is_menu_open, ui.new_color_picker, ui.set_callback, ui.set, ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan, math_fmod = math.ceil, math.tan, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan, math.fmod 
local math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_foreach, table_sort, table_remove, table_foreachi, table_move, table_getn, table_concat, table_insert = table.maxn, table.foreach, table.sort, table.remove, table.foreachi, table.move, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
--end of local variables 

local show_angles_reference = ui.new_multiselect("VISUALS", "Other ESP", "Show Anti-aimbot angles", "Real", "Fake", "LBY", "Camera")

local real_length_reference = ui.new_slider("VISUALS", "Other ESP", "Real Distance / Color", 10, 80, 30, true, "u")
local real_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Real Color", 28, 132, 255, 220)

local fake_length_reference = ui.new_slider("VISUALS", "Other ESP", "Fake Distance / Color", 10, 80, 30, true, "u")
local fake_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Fake Color", 0, 164, 52, 220)

local lby_length_reference = ui.new_slider("VISUALS", "Other ESP", "LBY Distance / Color", 10, 80, 30, true, "u")
local lby_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "LBY Color", 255, 0, 0, 220)

local camera_length_reference = ui.new_slider("VISUALS", "Other ESP", "Camera Distance / Color", 10, 80, 30, true, "u")
local camera_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Camera Color", 255, 255, 255, 220)

local function is_thirdperson(ctx)
	local x, y, z = client_eye_position()
	local pitch, yaw = client_camera_angles()
	
	yaw = yaw - 180
	pitch, yaw = math_rad(pitch), math_rad(yaw)

	x = x + math_cos(yaw)*4
	y = y + math_sin(yaw)*4
	z = z + math_sin(pitch)*4

	local wx, wy = client_world_to_screen(ctx, x, y, z)
	return wx ~= nil
end

local function contains(table, val)
	for i=1, #table do
		if table[i] == val then 
			return true
		end
	end
	return false
end

local function on_show_angles_change()
	local value = ui_get(show_angles_reference)
	ui_set_visible(real_length_reference, contains(value, "Real"))
	ui_set_visible(real_color_reference, contains(value, "Real"))

	ui_set_visible(fake_length_reference, contains(value, "Fake"))
	ui_set_visible(fake_color_reference, contains(value, "Fake"))

	ui_set_visible(lby_length_reference, contains(value, "LBY"))
	ui_set_visible(lby_color_reference, contains(value, "LBY"))

	ui_set_visible(camera_length_reference, contains(value, "Camera"))
	ui_set_visible(camera_color_reference, contains(value, "Camera"))
end

local function draw_angle(ctx, name, r, g, b, a, distance, location_x, location_y, location_z, origin_x, origin_y, yaw)
	local location_x_angle = location_x + math_cos(math_rad(yaw)) * distance
	local location_y_angle = location_y + math_sin(math_rad(yaw)) * distance

	local world_x, world_y = client_world_to_screen(ctx, location_x_angle, location_y_angle, location_z)

	if world_x ~= nil then
		client_draw_line(ctx, origin_x, origin_y, world_x, world_y, r, g, b, a)
		client_draw_text(ctx, world_x, world_y, r, g, b, a, "c-", 0, name)
	end
end
ui.set_callback(show_angles_reference, on_show_angles_change)

local function on_paint(ctx)
	local value = ui_get(show_angles_reference)
	if #value == 0 or not is_thirdperson(ctx) then
		return
	end

	local local_player = entity_get_local_player()
	if local_player == nil or entity_get_prop(local_player, "m_lifeState") ~= 0 then
		return
	end

	local location_x, location_y, location_z = entity_get_prop(local_player, "m_vecAbsOrigin")
	location_z = location_z + 1

	if location_x then
		local world_x, world_y = client_world_to_screen(ctx, location_x, location_y, location_z)

		if world_x == nil then
			return
		end

		if contains(value, "Real") then
			local r, g, b, a = ui_get(real_color_reference)
			local distance = ui_get(real_length_reference)

			local _, yaw = entity_get_prop(local_player, "m_angAbsRotation")
			if yaw ~= nil then
				local bodyyaw = entity_get_prop(local_player, "m_flPoseParameter", 11)
				if bodyyaw ~= nil then
					bodyyaw = bodyyaw * 120 - 60
					draw_angle(ctx, "REAL", r, g, b, a, distance, location_x, location_y, location_z, world_x, world_y, yaw + bodyyaw)
				end
			end
		end

		if contains(value, "Fake") then
			local r, g, b, a = ui_get(fake_color_reference)
			local distance = ui_get(fake_length_reference)
			local _, yaw, _ = entity_get_prop(entity_get_local_player(), "m_angEyeAngles")

			draw_angle(ctx, "FAKE", r, g, b, a, distance, location_x, location_y, location_z, world_x, world_y, yaw)
		end

		if contains(value, "LBY") then
			local r, g, b, a = ui_get(lby_color_reference)
			local distance = ui_get(lby_length_reference)
			local yaw = entity_get_prop(entity_get_local_player(), "m_flLowerBodyYawTarget")

			draw_angle(ctx, "LBY", r, g, b, a, distance, location_x, location_y, location_z, world_x, world_y, yaw)
		end

		if contains(value, "Camera") then
			local r, g, b, a = ui_get(camera_color_reference)
			local distance = ui_get(camera_length_reference)
			local _, yaw = client_camera_angles()

			draw_angle(ctx, "CAM", r, g, b, a, distance, location_x, location_y, location_z, world_x, world_y, yaw)
		end

		client_draw_circle(ctx, world_x, world_y, 17, 17, 17, 255, 2, 0, 1)
	end
end
client.set_event_callback("paint", on_paint)
