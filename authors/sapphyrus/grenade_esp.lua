--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_log, client_draw_rectangle, client_draw_circle_outline, client_userid_to_entindex, client_draw_gradient, client_set_event_callback, client_screen_size, client_eye_position, client_color_log = client.latency, client.log, client.draw_rectangle, client.draw_circle_outline, client.userid_to_entindex, client.draw_gradient, client.set_event_callback, client.screen_size, client.eye_position, client.color_log 
local client_draw_circle, client_draw_text, client_visible, client_exec, client_delay_call, client_trace_line, client_world_to_screen, client_draw_hitboxes = client.draw_circle, client.draw_text, client.visible, client.exec, client.delay_call, client.trace_line, client.world_to_screen, client.draw_hitboxes 
local client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_get_player_name, entity_get_all, entity_set_prop, entity_get_player_weapon, entity_hitbox_position, entity_get_prop, entity_get_players, entity_get_classname = entity.get_local_player, entity.is_enemy, entity.get_player_name, entity.get_all, entity.set_prop, entity.get_player_weapon, entity.hitbox_position, entity.get_prop, entity.get_players, entity.get_classname 
local globals_mapname, globals_tickcount, globals_realtime, globals_absoluteframetime, globals_tickinterval, globals_curtime, globals_frametime, globals_maxplayers = globals.mapname, globals.tickcount, globals.realtime, globals.absoluteframetime, globals.tickinterval, globals.curtime, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_new_color_picker, ui_set_callback, ui_set, ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.new_color_picker, ui.set_callback, ui.set, ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_correctRadians, math_fact, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan = math.ceil, math.tan, math.correctRadians, math.fact, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan 
local math_fmod, math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.fmod, math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_foreach, table_sort, table_remove, table_foreachi, table_move, table_getn, table_concat, table_insert = table.maxn, table.foreach, table.sort, table.remove, table.foreachi, table.move, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
--end of local variables 

local molotov_radius_reference = ui.new_checkbox("VISUALS", "Other ESP", "Grenades: Molotov radius")
local molotov_radius_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Grenades: Molotov radius", 255, 63, 63, 190)
local grenade_timer_reference = ui.new_checkbox("VISUALS", "Other ESP", "Grenades: Timer")

local dormant_grenades = {}

local function distance(x1, y1, x2, y2)
	return math_sqrt((x2-x1)^2 + (y2-y1)^2)
end

local function DrawCircle3D(ctx, x, y, z, radius, r, g, b, a, accuracy)
	local accuracy = accuracy or 3
	local screen_x_line_old, screen_y_line_old
	for rot=0, 360,accuracy do
		local rot_temp = math_rad(rot)
		local lineX, lineY, lineZ = radius * math_cos(rot_temp) + x, radius * math_sin(rot_temp) + y, z
		local screen_x_line, screen_y_line = client.world_to_screen(ctx, lineX, lineY, lineZ)
		if screen_x_line ~=nil and screen_x_line_old ~= nil then
		  client_draw_line(ctx, screen_x_line, screen_y_line, screen_x_line_old, screen_y_line_old, r, g, b, a)
		end
		screen_x_line_old, screen_y_line_old = screen_x_line, screen_y_line
	end
end

local function lerp_pos(x1, y1, z1, x2, y2, z2, percentage)
	local x = (x2 - x1) * percentage + x1
	local y = (y2 - y1) * percentage + y1
	local z = (z2 - z1) * percentage + z1
	return x, y, z
end

local function on_paint(ctx)
	if ui_get(molotov_radius_reference) then
		local r, g, b, a = ui_get(molotov_radius_color_reference)

		local molotovs = entity_get_all("CInferno")
		for i=1, #molotovs do
			local molotov = molotovs[i]
			local origin_x, origin_y, origin_z = entity_get_prop(molotov, "m_vecOrigin")

			local cell_radius = 40
			local molotov_radius = 0
			local center_x, center_y, center_z

			local cells = {}
			local maximum_distance = 0
			local cell_max_1, cell_max_2

			--accumulate burning cells
			for i=1, 64 do
				if entity_get_prop(molotov, "m_bFireIsBurning", i) then
					local x_delta = entity_get_prop(molotov, "m_fireXDelta", i)
					local y_delta = entity_get_prop(molotov, "m_fireYDelta", i)
					local z_delta = entity_get_prop(molotov, "m_fireZDelta", i)
					table_insert(cells, {x_delta, y_delta, z_delta})
					--client_draw_text(ctx, world_x, world_y, 255, 255, 255, 255, "c", 0, "Burning")
				end
			end

			for i=1, #cells do
				local cell = cells[i]
				local x_delta, y_delta, z_delta = cell[1], cell[2], cell[3]

				--local x, y, z = origin_x+x_delta, origin_y+y_delta, origin_z+z_delta
				--local world_x, world_y = client_world_to_screen(ctx, x, y, z)
				--DrawCircle3D(ctx, x, y, z, cell_radius, 255, 255, 255, 255, 3.6)

				for i2=1, #cells do
					local cell2 = cells[i2]
					local distance = distance(x_delta, y_delta, cell2[1], cell2[2])
					if distance > maximum_distance then
						maximum_distance = distance
						cell_max_1 = cell
						cell_max_2 = cell2
					end
				end
			end

			if cell_max_1 ~= nil and cell_max_2 ~= nil then

				local x1, y1, z1 = origin_x+cell_max_1[1], origin_y+cell_max_1[2], origin_z+cell_max_1[3]
				local x2, y2, z2 = origin_x+cell_max_2[1], origin_y+cell_max_2[2], origin_z+cell_max_2[3]

				local world_x1, world_y1 = client_world_to_screen(ctx, x1, y1, z1)
				local world_x2, world_y2 = client_world_to_screen(ctx, x2, y2, z2)

				--client_draw_line(ctx, world_x1, world_y1, world_x2, world_y2, 255, 255, 255, 255)

				local center_x_delta, center_y_delta, center_z_delta = lerp_pos(cell_max_1[1], cell_max_1[2], cell_max_1[3], cell_max_2[1], cell_max_2[2], cell_max_2[3], 0.5)
				local center_x, center_y, center_z = origin_x+center_x_delta, origin_y+center_y_delta, origin_z+center_z_delta

				--local world_x, world_y = client_world_to_screen(ctx, center_x, center_y, center_z)
				DrawCircle3D(ctx, center_x, center_y, center_z, maximum_distance/2+cell_radius, r, g, b, a, 1)
			end
		end
	end

	local grenades_dormant = {}

end
client.set_event_callback("paint", on_paint)

local function on_smokegrenade_detonate(e)
	table_insert()
end
